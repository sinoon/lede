# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  schedule:
    - cron: 0 20 * * *
  release:
    types: [published]
  workflow_dispatch:
    
permissions:
  contents: read

jobs:

  build_openwrt:

    permissions:
      contents: write # for release creation

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          sed -i '$a src-git small8 https://github.com/kenzok8/small-package' feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config
          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:
          # CONFIG_TARGET_IMAGES_GZIP=y
          # CONFIG_KERNEL_BUILD_USER="OpenWrt-CI"
          # CONFIG_KERNEL_BUILD_DOMAIN="Azure"
          cat >> .config <<EOF
          
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_DEVICE_generic=y
          CONFIG_PACKAGE_adguardhome=y
          CONFIG_PACKAGE_aliyundrive-fuse=y
          CONFIG_PACKAGE_aliyundrive-webdav=y
          CONFIG_PACKAGE_bash=y
          # CONFIG_PACKAGE_chinadns-ng is not set
          # CONFIG_PACKAGE_coreutils-base64 is not set
          CONFIG_PACKAGE_coreutils-nohup=y
          # CONFIG_PACKAGE_dns2socks is not set
          # CONFIG_PACKAGE_dns2tcp is not set
          CONFIG_PACKAGE_fuse-utils=y
          CONFIG_PACKAGE_iperf3-ssl=y
          CONFIG_PACKAGE_iptvhelper=y
          CONFIG_PACKAGE_kmod-fuse=y
          CONFIG_PACKAGE_libcap-bin=y
          CONFIG_PACKAGE_libcap-bin-capsh-shell="/bin/sh"
          # CONFIG_PACKAGE_libcares is not set
          # CONFIG_PACKAGE_libev is not set
          CONFIG_PACKAGE_libfuse=y
          # CONFIG_PACKAGE_libmbedtls is not set
          CONFIG_PACKAGE_libruby=y
          # CONFIG_PACKAGE_libsodium is not set
          # CONFIG_PACKAGE_libudns is not set
          CONFIG_PACKAGE_libyaml=y
          # CONFIG_PACKAGE_lua-neturl is not set
          # CONFIG_PACKAGE_luci-app-adbyby-plus is not set
          CONFIG_PACKAGE_luci-app-adguardhome=y
          CONFIG_PACKAGE_luci-app-advanced=y
          CONFIG_PACKAGE_luci-app-aliyundrive-fuse=y
          CONFIG_PACKAGE_luci-app-aliyundrive-webdav=y
          # CONFIG_PACKAGE_luci-app-bypass_INCLUDE_ShadowsocksR_Libev_Client is not set
          # CONFIG_PACKAGE_luci-app-bypass_INCLUDE_ShadowsocksR_Libev_Server is not set
          # CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Shadowsocks_Libev_Client is not set
          # CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Shadowsocks_Libev_Server is not set
          # CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Simple_Obfs is not set
          # CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Socks_Server is not set
          # CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Trojan is not set
          # CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Xray is not set
          CONFIG_PACKAGE_luci-app-iperf=y
          CONFIG_PACKAGE_luci-app-iptvhelper=y
          CONFIG_PACKAGE_luci-app-openclash=y
          # CONFIG_PACKAGE_luci-app-ssr-plus is not set
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Client is not set
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Server is not set
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Simple_Obfs is not set
          # CONFIG_PACKAGE_luci-app-vlmcsd is not set
          # CONFIG_PACKAGE_luci-app-vsftpd is not set
          # CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Hysteria is not set
          # CONFIG_PACKAGE_luci-app-vssr_INCLUDE_ShadowsocksR_Libev_Server is not set
          # CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Trojan is not set
          # CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Xray is not set
          # CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Xray_plugin is not set
          CONFIG_PACKAGE_luci-app-watchcat=m
          CONFIG_PACKAGE_luci-compat=y
          CONFIG_PACKAGE_luci-i18n-adguardhome-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-aliyundrive-fuse-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-aliyundrive-webdav-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-iperf-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-iptvhelper-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-watchcat-zh-cn=m
          # CONFIG_PACKAGE_luci-lib-ipkg is not set
          # CONFIG_PACKAGE_microsocks is not set
          # CONFIG_PACKAGE_resolveip is not set
          CONFIG_PACKAGE_ruby=y
          CONFIG_PACKAGE_ruby-bigdecimal=y
          CONFIG_PACKAGE_ruby-date=y
          CONFIG_PACKAGE_ruby-digest=y
          CONFIG_PACKAGE_ruby-enc=y
          CONFIG_PACKAGE_ruby-forwardable=y
          CONFIG_PACKAGE_ruby-pstore=y
          CONFIG_PACKAGE_ruby-psych=y
          CONFIG_PACKAGE_ruby-stringio=y
          CONFIG_PACKAGE_ruby-strscan=y
          CONFIG_PACKAGE_ruby-yaml=y
          # CONFIG_PACKAGE_shadowsocks-libev-ss-local is not set
          # CONFIG_PACKAGE_shadowsocks-libev-ss-redir is not set
          # CONFIG_PACKAGE_shadowsocks-libev-ss-server is not set
          # CONFIG_PACKAGE_shadowsocksr-libev-ssr-check is not set
          # CONFIG_PACKAGE_shadowsocksr-libev-ssr-local is not set
          # CONFIG_PACKAGE_shadowsocksr-libev-ssr-redir is not set
          # CONFIG_PACKAGE_shadowsocksr-libev-ssr-server is not set
          # CONFIG_PACKAGE_simple-obfs is not set
          # CONFIG_PACKAGE_tcping is not set
          CONFIG_PACKAGE_unzip=y
          CONFIG_PACKAGE_vim-full=y
          CONFIG_PACKAGE_watchcat=m
          # CONFIG_PACKAGE_xray-core is not set
          CONFIG_PACKAGE_zsh=y
          CONFIG_TARGET_KERNEL_PARTSIZE=512
          CONFIG_TARGET_ROOTFS_PARTSIZE=1024
          CONFIG_PACKAGE_adbyby=y
          # CONFIG_PACKAGE_kmod-inet-diag is not set
          CONFIG_PACKAGE_vlmcsd=y
          CONFIG_PACKAGE_vsftpd-alt=y
          CONFIG_VSFTPD_USE_UCI_SCRIPTS=y

          EOF
          #
          # ===============================================================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
  

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
